#!/usr/bin/wish

load $env(NESSI_DIR)/lib/libfitstcl.so

#  Header item specifications
#
#  Add header items to these lists, and then add corresponding format
#  specifications to the routine parse_header.
#
#  To add a new instrument , create a whole new INSTR(MyInstrumentName) list
#  and add an instrument specific header block in the routine "newpage"
#
#

set INSTR(BenchSpectrograph) "OBJECT RA DEC EQUINOX UT LSTHDR DATE-OBS
                              AIRMASS OBSERVER EXPTIME GRATNAME FILTNAMC GRATANGL 
                              FIBRNAME FIBFOCUS CAMFOCUS CCDSUM FILTNAMA FILTNAMB
                              FILTNAMD"

set INSTR(MiniMosaic)         "OBJECT RA DEC EQUINOX TIME-OBS LSTHDR DATE-OBS 
                              AIRMASS OBSERVER EXPTIME FILTER ROTANGLE RAPANGL DECPANGL
                              TELFOCUS NCCDS DEWTEM"

set INSTR(Tip-TiltModule)     "OBJECT RA DEC EQUINOX TIME-OBS LSTHDR DATE-OBS
                              AIRMASS OBSERVER EXPTIME ROTANGLE TELFOCUS DEWTEMP"

set INSTR(NESSI)              "OBJECT RA DEC EQUINOX TIME-OBS LSTHDR DATE-OBS 
                              AIRMASS OBSERVER EXPTIME FILTERA FILTERB ROTANGLE RAPANGL DECPANGL
                              TELFOCUS DEWTEM"

set AVAILINST [list "Bench Spectrograph" "Mini Mosaic" "NESSI" "Tip-Tilt Module"]
set SCOPE "WIYN Observatory"

proc start_log {homedir_entry instr_menu} {
 global pagecount oldfile datestring
 global path observer instr 
 global startbutton pausebutton
 set path [$homedir_entry get]
 set observer "              "
 set instr [$instr_menu cget -text]
 if {[catch {eval exec "ls -t [glob $path/*.fits] | head -1"} result] == 0} {
    set oldfile $result
 }
#        set oldfile whatever
 set now [exec date]
 set datestring "[lrange $now 1 2] [lindex $now 5]"
 newpage 
 $startbutton configure -state disabled
 $pausebutton configure -state normal -bg green -activebackground green
 raise .logcontrol
 set afterid [after 2000 nextlog .t$pagecount.canvas]
}


#  Autolog procs

proc canvas_text_select {win x y} {
 global font1
 canvas_text_done $win
 if {[$win type current] == "text"} {
   $win addtag "editText" withtag current
 } else {
   $win create text $x $y -anchor nw -justify left -tags "editText" -font $font1
 }
 focus $win
 $win focus "editText"
 $win icursor "editText" @$x,$y

 bind text <KeyPress> {
   canvas_text_edit_add %W %A
 }
 bind text <KeyPress-Return> {
   canvas_text_edit_add %W "\n"
 }
 bind text <KeyPress-BackSpace> {
   canvas_text_edit_backsp %W 
 }
 bind text <KeyPress-Delete> {
   canvas_text_edit_backsp %W
 }
}

proc canvas_text_edit_add {win str} {
 $win insert "editText" insert $str 
}

proc canvas_text_edit_backsp {win} {
 set pos [expr [$win index "editText" insert] - 1] 
 if {$pos >= 0} {
   $win dchars "editText" $pos
 }
}

proc canvas_text_done {win} {
 set mesg [$win itemcget "editText" -text]
 if {[string length [string trim $mesg]] == 0} {
   $win delete "editText"
 }
 $win dtag "editText"
 $win focus ""
}

#
# Replaced by direct header inspection using fitsTcl library
#
#
#proc parse_header fits_file {
#
# global binpath header instr_menu
#
#   set perlscript [join [list [$instr_menu cget -text] "_parse.pl"] ""]
#   regsub " " $perlscript "" perlscript
#   set hid [eval exec "$binpath/$perlscript $fits_file > $binpath/tmpheader"]
#   set fid [open "$binpath/tmpheader" "r"]
#
#   set i 0
#   while {[gets $fid line] >= 0} {
#     incr i
#     set header($i) $line
#   }
#   close $fid
#}

proc findcomments { in } {
  set all [lrange [$in dump] 10 end]
  set cmt ""
  set l 0
  foreach i $all {
     if { [string range $i 0 6] == "COMMENT" } {
        incr l 1
        if { $l < 4 } {
           set cmt "$cmt\n[string range [string trim [lrange $i 1 end]] 0 54]"
        }
     }
     set cmt [string trim $cmt \n]
  }
  return $cmt
}


proc getvalue { in k } {
   set vals [$in get keyword $k] 
   foreach e $vals { 
      if { [lindex $e 0] == $k } {set v [string trim [lindex $e 1] " '"] }
   }
   return $v
}


proc parse_header fits_file {
global header INSTR instr_menu FILTIDX
   set in [fits open $fits_file]
   set idx 1
   set header($idx) [file rootname [file tail $fits_file]]
   set iname  [join [split [lindex [$instr_menu configure -text] 4] " "] ""]
   foreach i $INSTR($iname) {
puts stdout "at $i"
      set v "0"
      catch {
        set v [getvalue $in $i]
      }
      incr idx 1
      set header($idx) "?"
      switch $i {
      AIRMASS  { set header($idx) [format %5.3f $v] }
      CCDSUM   { set g [getvalue $in GAIN] 
                 set header($idx) "[join [split $v ,] x]\n($g)" 
               }
      DATE-OBS { set header($idx) [string range [join [split $v /] -] 0 9] }
      TARGRA   { set header($idx) [format %1.11s $v] }
      TARGDEC  { set header($idx) [format %1.11s $v] }
      RA       { set header($idx) [format %1.11s $v] }
      DEC      { set header($idx) [format %1.11s $v] }
      EPOCH    { set header($idx) [format %6.1f $v] }
      EQUINOX  { set header($idx) [format %6.1f $v] }
      TELEQUIN { set header($idx) [format %6.1f $v] }
      NCCDS    { set header($idx) $v }
      OBSERVER { set header($idx) " [string range $v 0 9]\n [string range $v 10 19]\n [string range $v 20 29]"}
      EXPTIME  { if { $iname == "MiniMosaic" } {
                   set t [getvalue $in OBSTYPE]
                 } else {
                   set t [getvalue $in IMAGETYP]
                 }
                 set header($idx) "[string trim $v .] ($t)"
               }
      FILTNAMC { set FILTIDX $idx 
                        if { $v != "none" } {set header($FILTIDX) $v}
                      }
      FILTNAMA -
      FILTNAMB -
      FILTNAMD {  if { $v != "none" } {set header($FILTIDX) $v} }
      FILTER   { set header($idx) [string trim $v] }
      GRATNAME { set header($idx) [string range $v 0 12] }
      FIBCABLE { set header($idx) [string range $v 0 12] }
      FIBRNAME { set header($idx) [string range $v 0 12] }
      OBJECT   { set header($idx) "[string range $v 0 8]\n[string range $v 9 18]" }
      OPICNUM  { set v [file root [file tail $fits_file]]
                 set header($idx) [lindex [string trim [join [split [string tolower $v] "abcdefghijklmnopqrstuvwxyz-_."]]] end] 
               }
      ST       -
      LSTHDR   { set header($idx) [format %1.8s $v] }
      GRATANGL -
      ROTANGLE { set header($idx) [format %6.1f $v] }
      RAPANGL  { set header($idx) [format %6.1f $v] }
      DECPANGL { set header($idx) [format %6.1f $v] }
      FIBFOCUS { set header($idx) [format %8.3f $v] }
      CAMFOCUS { set header($idx) [format %8.3f $v] }
      TELFOCUS { set header($idx) [format %5.0f $v] }
      DEWTEMP  { set header($idx) [format %5.0f $v] }
      DEWTEM   { set header($idx) [format %5.0f $v] }
      TIME-OBS { set header($idx) [format %1.8s $v] }
      UT       { set header($idx) [format %1.8s $v] }
      default  { set header($idx) "?" }
      }
   }
   set header(comments) [findcomments $in]
   $in close
}



proc nextlog { w } {

 global yoff entrycount oldfile pagecount header oldheader
 global path observer instr autoprint
 global afterid font1 binpath
 global homedir_entry LogQueued

 set binpath $env(HOME)
 set path [$homedir_entry get]
 set did [exec date +%y-%m-%d]

# set psfile "[$homedir_entry get]/autolog_page$pagecount-$did.ps"
 set psfile "$binpath/autolog/autolog_page$pagecount-$did.ps"
 set newfile $oldfile
 update
 if {[catch {eval exec "ls -t [glob $path/*.fits] | head -1"} result] == 0} {
   set newfile $result
 } 
 if { [info exists LogQueued($newfile)] == 0 } {
   if {$newfile != $oldfile} {
     puts "Starting new log entry"
     set LogQueued($newfile) 1
     after 200000 "addentry .t$pagecount.canvas  $newfile"
     set oldfile $newfile
     update idletasks
   }
 }
 set afterid [after 2000 nextlog .t$pagecount.canvas]
} 

proc waitfor { n } {
   while { $n > 0 } {
      exec sleep 1
      update
      incr n -1
   }
}


proc addentry { w newfile } {
global yoff entrycount oldfile pagecount header oldheader
 global path observer instr autoprint prname
 global afterid font1 binpath
 global homedir_entry 
  parse_header $newfile
  set did [exec date +%y-%m-%d]
  set psfile "$binpath/autolog/autolog_page$pagecount-$did.ps"

   if {$entrycount < 11} {
     set w .t$pagecount.canvas
     incr entrycount
     drawlog $w
     $w postscript -pageheight 7.5i -file $psfile -x -5 -y -15 -rotate yes
     set afterid [after 2000 nextlog $w]
   } else {
      if ($autoprint==1) {eval exec "lpr -P$prname -onobanner $psfile"}
      newpage
      after 200 "addentry .t$pagecount.canvas $newfile"
   }

}


proc newpage {} {
 global entrycount yoff pagecount datestring
 global path instr  afterid prname
 global pausebutton observer
 global homedir_entry header 
 set did [exec date +%y-%m-%d]
 incr pagecount
# set psfile "[$homedir_entry get]/autolog_page$pagecount-$did.ps"
 set psfile "$binpath/autolog/autolog_page$pagecount-$did.ps"
 $pausebutton configure -command "pause_log .t$pagecount"
 set bigfont -adobe-times-bold-r-normal--24-240-75-75-p-132-iso8859-1
 set medfont -adobe-times-bold-r-normal--18-180-75-75-p-99-iso8859-1
 set smallfont -adobe-times-bold-r-normal--14-140-75-75-p-77-iso8859-1
        set w [toplevel .t$pagecount]
        wm title $w "Autolog Page $pagecount"
        wm geometry $w 800x600+0+0
        set m  [menu $w.menubar -tearoff 0 -relief flat]
        $m add cascade -label File -menu [menu $m.file]
        $m.file add command -label "Print Page" -command "eval exec lpr -P$prname -onobanner $psfile"
        $m.file add command -label "New Page" -command "newpage"
        $m.file add command -label "Close Page" -command "wm withdraw $w"
        $m.file add command -label "Quit Autolog" -command "exit"
        $m add cascade -label Help -menu [menu $m.help]
        $m.help add command -label Index -command {puts Sorry}
        $w configure -menu $m
        wm geometry $w ""
        set c [canvas $w.canvas -height 690 -width 960 -bg lightgray]
        pack $c
   bind text <ButtonPress-1> {   canvas_text_select %W %x %y }
 bindtags $c {text}
#       Create header for each new page
 $c create rectangle 11 5 950 110 -width 2
 $c create text 20 20  -text "WIYN 3.5m Telescope" -font $bigfont -anchor w
 $c create text 20 45 -text "UT Date:  $datestring" -font $medfont -anchor w
# $c create text 700 45 -text "Observer:  $observer" -font $medfont -anchor w -tag observertext
 $c create text 425 45 -text "Instrument:" -font $medfont -anchor e
 $c create text 425 45 -text "  $instr" -font $medfont -anchor w
# $c create text 900 20  -text "AutoLog" -font $bigfont -anchor e
 $c create text 940 20 -text "Page $pagecount" -font $medfont -anchor e
# create headings; different headings for each instrument, but same layout
 set yoff 10
 set entrycount 0
 if {$instr == "Bench Spectrograph"} {
    set headings [list dum "Object" "Image filename" RA Dec Epoch UT LST \
                      "UT Date" Airmass Observer \
                      "Exposure\n Time/Type" \
                       Grating Filter "Grating\n  Angle" \
                      "Fiber\nCable" "Fiber\nFocus" "Camera\n Focus"  "Binning\n and Gain" ]
   for {set i 1} {$i<=18} {incr i} {
     set header($i) [lindex $headings $i]
   }
 }
 if {$instr == "Mini Mosaic"} {
    set headings [list dum "Object" "Image filename" RA Dec Epoch UT \
                       LST "UT Date" Airmass Observer \
                      "Exposure\n Time/Type" \
                       Filter "Rotation\n  Angle" \
                    "  RA\nAngle" "  Dec\nAngle" "Focus" "N_ccds" "T_dewar"  "T_ccd" ]
   for {set i 1} {$i<=18} {incr i} {
     set header($i) [lindex $headings $i]
   }
 } 
 if {$instr == "Tip-Tilt Module"} {
    set headings [list dum "Object" "Image filename" RA Dec Epoch UT LST \
                      "UT Date" Airmass Observer \
                      "Exposure\n Time/Type" \
                      "Rotation\n Angle" \
                      "Camera\n Focus" "Dewar\n Temp." " " " " " " ]
   for {set i 1} {$i<=18} {incr i} {
     set header($i) [lindex $headings $i]
   }
 }
 if {$instr == "NESSI"} {
    set headings [list dum "Object" "Image filename" RA Dec Epoch UT \
                       LST "UT Date" Airmass Observer \
                      "Exposure\n Time/Type" \
                       FilterA FilterB "Rotation\n  Angle" \
                    "  RA\nAngle" "  Dec\nAngle" "Focus" "T_dewar"  "T_ccd" ]
   for {set i 1} {$i<=18} {incr i} {
     set header($i) [lindex $headings $i]
   }
 } 
 drawheadings $c
}
 
proc drawheadings w {
 global header comment 
 global yoff font1 font2
 global path observer instr 
 set font1 -linotype-helvetica-bold-r-normal-sans-10-120-72-72-p-67-iso8859-1
# set font1 -linotype-helvetica-bold-r-normal-sans-14-140-72-72-p-79-iso8859-1
# set font1 -linotype-helvetica-medium-r-narrow-sans-14-140-72-72-p-62-iso8859-1
# set font2 -adobe-times-bold-r-normal--24-240-75-75-p-132-iso8859-1
 set font2 -adobe-times-bold-r-normal--20-140-100-100-p-100-iso8859-1
 incr yoff 49
 set y1 [expr $yoff+1]
 set y50 [expr $yoff+50]
 set y25 [expr $yoff+25]
 set y13 [expr $yoff+13]
 set y38 [expr $yoff+38]
 set y8 [expr $yoff+8]
# circumscribe with thick rectangle
 $w create rectangle 11 $y1 950 $y50
# sequence number     REVISED FOR KPNO 3/14/02
 $w create rectangle 11 $y1 70 $y50
# target name
 $w create rectangle 70 $y1 290 $y25     
# RA
 $w create rectangle 70 $y25 155 $y50    
# Dec
 $w create rectangle 155 $y25 240 $y50   
# epoch
 $w create rectangle 240 $y25 290 $y50  
# and the rest
 $w create rectangle 290 $y1 360 $y25 
 $w create rectangle 290 $y25 360 $y50 
 $w create rectangle 360 $y1 410 $y25 
 $w create rectangle 360 $y25 410 $y50 
 $w create rectangle 410 $y1 470 $y50 
 $w create rectangle 470 $y1 550 $y25 
 $w create rectangle 470 $y25 550 $y50 
 $w create rectangle 550 $y1 600 $y25 
 $w create rectangle 600 $y1 650 $y25 
 $w create rectangle 600 $y25 650 $y50 
 $w create rectangle 650 $y25 700 $y50 
 $w create rectangle 650 $y25 700 $y50 
 $w create rectangle 700 $y1 950 $y50
#  write text into the boxes 
 $w create text 45 $y25 -text $header(1) -font $font1
 $w create text 180 $y13 -text $header(2) -font $font1
 $w create text 113 $y38 -text $header(3) -font $font1
 $w create text 198 $y38 -text $header(4) -font $font1
 $w create text 266 $y38 -text $header(5) -font $font1
 $w create text 327 $y13 -text $header(6) -font $font1
 $w create text 327 $y38 -text $header(7) -font $font1
 $w create text 386 $y13 -text $header(8) -font $font1 
 $w create text 386 $y38 -text $header(9) -font $font1 
 $w create text 440 $y25 -text $header(10) -font $font1
 $w create text 510 $y13 -text $header(11) -font $font1 
 $w create text 510 $y38 -text $header(12) -font $font1 
 $w create text 575 $y13 -text $header(13) -font $font1
 $w create text 575 $y38 -text $header(14) -font $font1
 $w create text 625 $y13 -text $header(15) -font $font1
 $w create text 625 $y38 -text $header(16) -font $font1
 $w create text 675 $y13 -text $header(17) -font $font1
 $w create text 675 $y38 -text $header(18) -font $font1
 $w create text 825 $y25 -text "Comments" -font $font1
# put space between headings and first log
 incr yoff 8
#  end of proc drawheadings
}

proc drawlog w {
 global header comment 
 global yoff font1 font2
 global path observer instr 
# set font1 -linotype-helvetica-bold-r-normal-sans-12-120-72-72-p-67-iso8859-1
 set font1 -linotype-helvetica-bold-r-normal-sans-14-140-72-72-p-79-iso8859-1
# set font1 -linotype-helvetica-medium-r-narrow-sans-14-140-72-72-p-62-iso8859-1
# set font2 -adobe-times-bold-r-normal--24-240-75-75-p-132-iso8859-1
 set font2 -adobe-times-bold-r-normal--20-140-100-100-p-100-iso8859-1
 set font3 -adobe-times-bold-r-normal--10-140-100-100-p-100-iso8859-1
 incr yoff 49
 set y1 [expr $yoff+1]
 set y50 [expr $yoff+50]
 set y25 [expr $yoff+25]
 set y13 [expr $yoff+13]
 set y38 [expr $yoff+38]
 set y8 [expr $yoff+8]
# circumscribe with thick rectangle
 $w create rectangle 11 $y1 950 $y50 -width 2
# sequence number     REVISED FOR KPNO 3/14/02
 $w create rectangle 11 $y1 70 $y50
# target name
 $w create rectangle 70 $y1 290 $y25     
# RA
 $w create rectangle 70 $y25 155 $y50    
# Dec
 $w create rectangle 155 $y25 240 $y50   
# epoch
 $w create rectangle 240 $y25 290 $y50  
# and the rest
 $w create rectangle 290 $y1 360 $y25 
 $w create rectangle 290 $y25 360 $y50 
 $w create rectangle 360 $y1 410 $y25 
 $w create rectangle 360 $y25 410 $y50 
 $w create rectangle 410 $y1 470 $y50 
 $w create rectangle 470 $y1 550 $y25 
 $w create rectangle 470 $y25 550 $y50 
 $w create rectangle 550 $y1 600 $y25 
 $w create rectangle 550 $y25 600 $y50 
 $w create rectangle 600 $y1 650 $y25 
 $w create rectangle 600 $y25 650 $y50 
 $w create rectangle 650 $y1 700 $y25 
 $w create rectangle 650 $y25 700 $y50 
 $w create rectangle 700 $y1 950 $y50 
#  write text into the boxes 
#      REVISED FOR KPNO 3/14/02
 $w create text 45 $y25 -text $header(2) -font $font1 -tag currentrun
 $w create text 180 $y13 -text $header(1) -font $font1 -tag highlight
 $w create text 116 $y38 -text $header(3) -font $font1
 $w create text 198 $y38 -text $header(4) -font $font1
 $w create text 269 $y38 -text $header(5) -font $font1
 $w create text 328 $y13 -text $header(6) -font $font1
 $w create text 328 $y38 -text $header(7) -font $font1
 $w create text 385 $y13 -text $header(8) -font $font3 
 $w create text 385 $y38 -text $header(9) -font $font1
 $w create text 440 $y25 -text $header(10) -font $font3  -tag highlight
 $w create text 513 $y13 -text $header(11) -font $font3 
 $w create text 513 $y38 -text $header(12) -font $font3
 $w create text 578 $y13 -text $header(13) -font $font3
 $w create text 576 $y38 -text $header(14) -font $font3
 $w create text 625 $y13 -text $header(15) -font $font3
 $w create text 625 $y38 -text $header(16) -font $font3
 $w create text 675 $y13 -text $header(17) -font $font3
 $w create text 679 $y38 -text $header(18) -font $font3
 $w create text 825 $y25 -text "$header(comments)" -font $font3
 $w itemconfigure highlight -fill firebrick
 $w itemconfigure currentrun -fill blue
 $w itemconfigure currentloop -fill blue
#  dump to postscript
#  end of proc drawlog
}

proc pause_log {win} {
 global afterid pausebutton resumebutton pagecount
 if {$afterid != ""} {
   after cancel $afterid
   pack forget $pausebutton
   $resumebutton configure -command "resume_log $win"
   pack $resumebutton -side left -padx 10 -pady 10
 }
 set afterid ""
}

proc resume_log {win} {
 global pausebutton resumebutton pagecount oldfile path
 global homedir_entry SCOPE
 set path [$homedir_entry get]
 pack forget $resumebutton
 $pausebutton configure -command "pause_log $win"
 pack $pausebutton -side left -padx 10 -pady 10
 if {[catch {eval exec "ls -t [glob $path/*.fits] | head -1"} result] == 0} {
    set oldfile $result
 }
 nextlog $win.canvas
}


#  Header item specifications
exec mkdir -p $env(HOME)/autolog

#  Beginning of main program

 wm withdraw .
 set t [toplevel .logcontrol]
 wm geometry $t 375x300+770+300
 wm title $t "$SCOPE Autolog Control Panel"
 set m  [menu $t.menubar -tearoff 0 -relief groove]
 $m add cascade -label File -menu [menu $m.file]
 $m.file add command -label Quit -command exit
 $m add cascade -label Help -menu [menu $m.help]
 $m.help add command -label "email dmills@noao.edu" -command {}
 $t configure -menu $m
 wm geometry $t ""
 set dum "whatever"
 set pagecount 0
 set prname lw7
 set afterid ""
 set oldfile whatever

#  set up the first frame

 set font1 -adobe-helvetica-bold-r-normal--14-100-100-100-p-82-iso8859-1
 set font2 -adobe-helvetica-medium-r-normal--18-180-75-75-p-98-iso8859-1
 set font2 -adobe-helvetica-medium-r-normal--12-120-75-75-p-67-iso8859-1
 set font2 -adobe-helvetica-medium-r-normal--14-100-100-100-p-76-iso8859-1
 set f [frame $t.f -relief groove -bd 2 ]
 set f1 [frame $f.1]
 set f2 [frame $f.2]
 set f3 [frame $f.3]
 set homedir [lindex $argv 0]
 if {$homedir == ""} {set homedir "$env(HOME)/autolog/"}
 set homedir_label [label $f1.hdl -text "Image directory:" -pady 10] 
 set homedir_entry [entry $f1.hde -width 30 -font $font2]
 $homedir_entry insert 0 $homedir


#  Instrument menu

 set instr_label [label $f1.instrl -text "       Instrument:" ]
 set instr_menu [menubutton $f1.instrm -direction flush -indicatoron \
                          true -relief raised -state normal -width 30]
 set instr_list [menu $instr_menu.intr_list -tearoff 0 -type normal]
 set ilist [list "Bench Spectrograph" "Mini Mosaic" "NESSI" "Tip-Tilt Module"]

 foreach instrument $ilist {
   $instr_list add command -label $instrument \
             -command "$instr_menu configure -text {$instrument}"
 }

 $instr_menu configure -text "NESSI"
 $instr_menu configure -menu $instr_list
 
 set startbutton [button $f3.start -command "start_log $homedir_entry \
              $instr_menu "\
                   -text "Start\nLogging" -font $font1 -background "SlateGray" \
                         -fg khaki -bd 4 -pady 10]

 set pausebutton [button $f3.pause  -state disabled \
                   -text "Pause\nLogging" -font $font1 -background "SlateGray" \
                         -fg black -bd 4 -pady 10 \
                             -command "pause_log .t$pagecount "]
 set resumebutton  [button $f3.resume \
               -text "Resume\nLogging" -font $font1 \
         -background red -activebackground red -fg black -bd 4 -pady 10 ]
 grid $homedir_label $homedir_entry 
 grid $instr_label -row 1 -column 0
 grid $instr_menu -row 1 -column 1
 pack $startbutton $pausebutton -side left -padx 10 -pady 10
 pack $f1 -fill both -expand yes -padx 10 
 pack $f3 -fill both -expand yes -padx 10 -pady 5 -side right
 pack $f


 
# set up the second frame

 set g [frame $t.g -relief groove -bd 2]
 set h [frame $t.h -relief groove -bd 2]
 set sig [frame $t.sig -relief groove -bd 2 ]
 pack [frame $g.f1] -fill both -expand yes -pady 10
 pack [checkbutton $g.f1.recallb -variable autoprint ] -side left -anchor w -padx 15
 $g.f1.recallb select
 pack [label $g.f1.recalll -text "Print log sheets automatically"] -side left -anchor w
 pack $g -fill both -expand yes
 pack [label $sig.lab -text "10/10/99 R. Marzke          Tcl'd 9/20/03 D.Mills" -font \
              -adobe-helvetica-medium-r-normal--12-120-75-75-p-67-iso8859-1 \
              -anchor w] -fill both -expand yes
 pack $sig -fill both -expand yes

